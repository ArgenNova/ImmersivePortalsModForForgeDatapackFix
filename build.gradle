buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+' // MixinGradle
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'org.parchmentmc.librarian.forgegradle'
    apply plugin: 'org.spongepowered.mixin'
    apply plugin: 'maven-publish'

    sourceCompatibility = 17
    targetCompatibility = 17

    version = project.mod_version //'0.16-mc1.16.5-forge'

    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()

        maven { url = 'https://dist.creeper.host/Sponge/maven' }

        maven {
            name "tterrag maven"
            url "https://maven.tterrag.com/"
        }
        //maven{url="https://minecraft.curseforge.com/api/maven/"}
        maven {
            url = "https://jitpack.io"
        }
        maven {
            url = "https://modmaven.dev/"
        }

        flatDir {
            dirs 'deps'
        }

    }

    dependencies {
        minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.loader_version}"
        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

        // Pehkui
        api fg.deobf("com.github.Virtuoel:Pehkui:3.3.3-1.18.2-forge")
        api fg.deobf("teamtwilight:twilightforest:4.1.999:universal")
    }

    minecraft {
        mappings channel: 'parchment', version: "${project.mapping_version}-${project.minecraft_version}"
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        it.options.release = 17
    }
}

archivesBaseName = project.archives_base_name
group = project.maven_group

minecraft {
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}


dependencies {
    compileOnly project(":imm_ptl_core")
    compileOnly project(":q_misc_util")
}
tasks.withType(JavaCompile) {
    source(project(":imm_ptl_core").sourceSets.main.allSource)
    source(project(":q_misc_util").sourceSets.main.allSource)
}
processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from project(":imm_ptl_core").sourceSets.main.resources
    from project(":q_misc_util").sourceSets.main.resources
}


jar {
    manifest {
        attributes([
                "Specification-Title"     : "Immersive Portals",
                "Specification-Vendor"    : "qouteall",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "qouteall, Nick1st",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    from "LICENSE"

    archiveFileName = "${project.archives_base_name}-${project.mod_version}-mc${project.minecraft_version}-forge.jar"
}
mixin {
    add sourceSets.main, 'mixins.imm_ptl.refmap.json'
    config 'imm_ptl.mixins.json'
    config 'imm_ptl_peripheral.mixins.json'
    //config 'q_misc_util.mixins.json'
    debug = false
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

task printClasspath {
    doLast {
        configurations.compileClasspath.each { println "\""+ (it.toString().replace("\\","/")) + "\"," }
    }
}
